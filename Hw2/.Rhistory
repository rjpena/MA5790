library("AppliedPredictiveModeling", lib.loc="C:/Users/Anaconda3/Lib/R/library")
genres<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
install.packages(c("RCurl","VIM","caret"))
require(RCurl)
genres<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
head(genres)
counts = table(music$GENRE)
require(RCurl)
music<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
head(genres)
counts = table(music$GENRE)
counts
barchart(Freq ~ Var1,
data = as.data.frame(counts),
ylim = c(0, max(counts)*1.1),
ylab = "Frequency",
xlab = "Genre")
barplot(Freq ~ Var1,
data = as.data.frame(counts),
ylim = c(0, max(counts)*1.1),
ylab = "Frequency",
xlab = "Genre")
barplot(Freq ~ Var1,
data = as.data.frame(counts),
ylab = "Frequency",
xlab = "Genre")
barplot(counts, ylab = "Frequency",xlab = "Genre")
barplot(counts,ylab = "Frequency",xlab = "Genre")
barplot(counts,ylab = "Frequency",xlab = "Genre")
library(caret)
train.index <- createDataPartition(music$GENRE, p = .7, list = FALSE)
train <- Data[ train.index,]
test  <- Data[-train.index,]
train.index <- createDataPartition(music$GENRE, p = .7, list = FALSE)
train <- music[ train.index,]
test  <- music[-train.index,]
View(test)
shape(train)
dim(train)
dim(test)
counts = table(train$GENRE)
counts
counts = table(test$GENRE)
counts
barplot(counts_train,ylab = "Frequency",xlab = "Genre")
counts_train = table(train$GENRE)
barplot(counts_train,ylab = "Frequency",xlab = "Genre")
counts_test = table(test$GENRE)
barplot(counts_test,ylab = "Frequency",xlab = "Genre")
barplot(counts_train,ylab = "Frequency",xlab = "Genre",main="Training")
barplot(counts_test,ylab = "Frequency",xlab = "Genre", main="Testing")
#create barplot for freqs of classes
barplot(counts,ylab = "Frequency",xlab = "Genre", main="Music Genres")
\
#4.2
permData <- data(permeability)
head(permData)
View(permeability)
load("~/GitHub/MA5790/Datasets/permeability.RData")
View(permeability)
head(permeability)
hist(permeability)
summary(apply(fingerprints, 2, mean))
hist(permeability)
hist(counts)
hist(music)
summary(apply(fingerprints, 2, mean))
hist(permeability)
#4.2
perm <-data(permeability)
head(perm)
hist(perm)
testing <- scale(pearmeability)
View(permeability)
#4.2
data =data(permeability)
head(data)
View(permeability)
View(permeability)
View(permeability)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss, useNames = FALSE, randomFrac = 1,
verbose = FALSE, ...)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss, useNames = FALSE, randomFrac = 1,
verbose = FALSE)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss, useNames = FALSE, randomFrac = 1,
verbose = FALSE)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss,verbose = FALSE)
maxDissim(permeability, fingerprints, n = 2,verbose = FALSE)
head(newSamp)
testing <- scale(pearmeability)
set.seed(1)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet, ]
start <- testing[startSet, ]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
testing <- scale(pearmeability)
View(permeability)
head(fingerprints)
summary(apply(fingerprints, 2, mean))
crossval<-createDataPartition(music$GENRE,k=10,returnTrain=T)
set.seed(1)
crossval<-createDataPartition(music$GENRE,k=10,returnTrain=T)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T)
crossval
dim(crossval)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T)
dim(crossval)
head(crossval)
View(crossval)
hist(crossval)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T,returnTrain=T)
#createDataPartitions default method uses stratification to handle class distributions. This sampling takes roughly 70% of each class for splitting.
train.index <- createDataPartition(music$GENRE, p = .7, list = FALSE,k=10)
require(RCurl)
music<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
head(music)
counts = table(music$GENRE)
counts
library(caret)
set.seed(1)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T)
train.index <- createDataPartition(music$GENRE, p = .7, list = FALSE)
train <- music[ train.index,]
test  <- music[-train.index,]
View(crossval)
#createDataPartitions default method uses stratification to handle class distributions. This sampling takes roughly 70% of each class for splitting.
train.index <- createDataPartition(music$GENRE, p = .7, list = T, returnTrain=T,k=5)
