#create barplot for freqs of classes
barplot(counts,ylab = "Frequency",xlab = "Genre", main="Music Genres")
\
#4.2
permData <- data(permeability)
head(permData)
View(permeability)
load("~/GitHub/MA5790/Datasets/permeability.RData")
View(permeability)
head(permeability)
hist(permeability)
summary(apply(fingerprints, 2, mean))
hist(permeability)
hist(counts)
hist(music)
summary(apply(fingerprints, 2, mean))
hist(permeability)
#4.2
perm <-data(permeability)
head(perm)
hist(perm)
testing <- scale(pearmeability)
View(permeability)
#4.2
data =data(permeability)
head(data)
View(permeability)
View(permeability)
View(permeability)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss, useNames = FALSE, randomFrac = 1,
verbose = FALSE, ...)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss, useNames = FALSE, randomFrac = 1,
verbose = FALSE)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss, useNames = FALSE, randomFrac = 1,
verbose = FALSE)
maxDissim(permeability, fingerprints, n = 2, obj = minDiss,verbose = FALSE)
maxDissim(permeability, fingerprints, n = 2,verbose = FALSE)
head(newSamp)
testing <- scale(pearmeability)
set.seed(1)
## A random sample of 5 data points
startSet <- sample(1:dim(testing)[1], 5)
samplePool <- testing[-startSet, ]
start <- testing[startSet, ]
newSamp <- maxDissim(start, samplePool, n = 20)
head(newSamp)
testing <- scale(pearmeability)
View(permeability)
head(fingerprints)
summary(apply(fingerprints, 2, mean))
crossval<-createDataPartition(music$GENRE,k=10,returnTrain=T)
set.seed(1)
crossval<-createDataPartition(music$GENRE,k=10,returnTrain=T)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T)
crossval
dim(crossval)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T)
dim(crossval)
head(crossval)
View(crossval)
hist(crossval)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T,returnTrain=T)
#createDataPartitions default method uses stratification to handle class distributions. This sampling takes roughly 70% of each class for splitting.
train.index <- createDataPartition(music$GENRE, p = .7, list = FALSE,k=10)
require(RCurl)
music<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
head(music)
counts = table(music$GENRE)
counts
library(caret)
set.seed(1)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T)
train.index <- createDataPartition(music$GENRE, p = .7, list = FALSE)
train <- music[ train.index,]
test  <- music[-train.index,]
View(crossval)
#createDataPartitions default method uses stratification to handle class distributions. This sampling takes roughly 70% of each class for splitting.
train.index <- createDataPartition(music$GENRE, p = .7, list = T, returnTrain=T,k=5)
#4.1
require(RCurl)
music<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
head(music)
#save counts of Genres in a table
counts = table(music$GENRE)
counts
#create barplot for freqs of classes
barplot(counts,ylab = "Frequency",xlab = "Genre", main="Music Genres")
library(caret)
set.seed(1)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T)
#this dataset is large enough for 10-Fold Cross-Validation
crossval<-CreateFolds(music$GENRE,k=10,returnTrain=T,list=T)
library(caret)
require(caret)
install.packages("caret")
library(caret)
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T)
train.index <- createDataPartition(music$GENRE, p = .7, list = T)
train <- music[ train.index,]
test  <- music[-train.index,]
train <- music[ train.index,]
test  <- music[-train.index,]
train.index <- createDataPartition(music$GENRE, p = .7, list = T)
train <- music[ train.index,]
dim(train)
counts_train = table(train$GENRE)
counts_train
counts = table(music$GENRE)
counts
dim(train)
barplot(counts_train,ylab = "Frequency",xlab = "Genre",main="Training")
dim(test)
counts_test = table(test$GENRE)
barplot(counts_test,ylab = "Frequency",xlab = "Genre", main="Testing")
counts_test
barplot(counts,ylab = "Frequency",xlab = "Genre", main="Music Genres")
barplot(counts_train,ylab = "Frequency",xlab = "Genre",main="Training")
barplot(counts_test,ylab = "Frequency",xlab = "Genre", main="Testing")
counts_train
barplot(counts_train,ylab = "Frequency",xlab = "Genre",main="Training",ylim=range(pretty(c(0, dat))))
barplot(counts_train,ylab = "Frequency",xlab = "Genre",main="Training",ylim=range(pretty(c(0, counts_train))))
barplot(counts_test,ylab = "Frequency",xlab = "Genre", main="Testing",ylim=range(pretty(c(0, counts_test))))
summary(apply(fingerprints, 2, mean))
data(permeability)
head(permeability)
hist(permeability)
data(permeability)
#4.2
install.packages("AppliedPredictiveModeling")
data(permeability)
data(permeability)
#4.1
install.packages(c("caret","AppliedPredictiveModeling"))
require(RCurl)
music<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
head(music)
#save counts of Genres in a table
counts = table(music$GENRE)
counts
#create barplot for freqs of classes
barplot(counts,ylab = "Frequency",xlab = "Genre", main="Music Genres")
#create barplot for freqs of classes
barplot(counts,ylab = "Frequency",xlab = "Genre", main="Music Genres",ylim=range(pretty(c(0, counts_train))))
#create barplot for freqs of classes
barplot(counts,ylab = "Frequency",xlab = "Genre", main="Music Genres",ylim=range(pretty(c(0, counts))))
library(caret)
set.seed(1)
#this dataset is large enough for 10-Fold Cross-Validation
crossval<-createFolds(music$GENRE,k=10,returnTrain=T,list=T)
train.index <- createDataPartition(music$GENRE, p = .7, list = T)
train <- music[ train.index,]
View(train.index)
test  <- music[-train.index,]
#display training partition
dim(train)
counts_train = table(train$GENRE)
counts_train
barplot(counts_train,ylab = "Frequency",xlab = "Genre",main="Training",ylim=range(pretty(c(0, counts_train))))
dim(test)
counts_test = table(test$GENRE)
counts_test
barplot(counts_test,ylab = "Frequency",xlab = "Genre", main="Testing",ylim=range(pretty(c(0, counts_test))))
data(permeability)
#4.2
library(AppliedPredictiveModeling)
data(permeability)
head(permeability)
hist(permeability)
summary(apply(fingerprints, 2, mean))
testing <- scale(pearmeability)
testing <- scale(permeability)
set.seed(1)
set.seed(11)
#Do repeated cross-validation
repeatedCV<-createMultiFolds(permeability,k=10,times=20)
View(repeatedCV)
#4.3
data(ChemicalManufacturingProcess)
head(ChemicalManufacturingProcess)
summary(ChemicalManufacturingProcess)
dim(ChemicalManufacturingProcess)
set.seed(111)
plsChem <- train(Yield ~., data=ChemicalManufacturingProcess, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, method="pls", na.remove=T,preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
#Many different scales(processes and materials). Needs to be centered and scaled
summary(ChemicalManufacturingProcess)
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, na.remove=T, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem
r2<-plsChem$results[,c("ncomp", "Rquared","RsquaredSD")]
r2<-plsChem$results[, c("ncomp", "Rsquared","RsquaredSD")]
r2$RsquaredTol <- r2$RsquaredSD/sqrt(length(plsChem$control$index))
r2$RsquaredTol
library(ggplot2)
SE<- ggplot(r2,aes(ncomp,Rsquared,ymin=Rsquared-RsquaredSE, ymax=Rsquared))
SE + geom_linerange() + geom_pointrange() + theme_dark()
SE + geom_linerange() + geom_pointrange() + theme_dark()
SE<- ggplot(r2,aes(ncomp,Rsquared,ymin=Rsquared-RsquaredSE, ymax=Rsquared))
SE + geom_linerange() + geom_pointrange() + theme_dark()
SE
r2$RsquaredSE <- r2$RsquaredSD/sqrt(length(plsChem$control$index))
SE<- ggplot(r2,aes(ncomp,Rsquared,ymin=Rsquared-RsquaredSE, ymax=Rsquared))
SE
SE + geom_linerange() + geom_pointrange() + theme_classic()
SE + geom_linerange() + geom_pointrange() + theme_classic()
SE<- ggplot(r2,aes(ncomp,Rsquared,ymin=Rsquared-RsquaredSE, ymax=Rsquared))
install.packages(c("caret","AppliedPredictiveModeling"))
require(RCurl)
music<-read.csv(text=getURL("https://raw.githubusercontent.com/rjpena/MA5790/master/Datasets/Genres/genresTrain.csv"), header=T)
install.packages(c("caret", "AppliedPredictiveModeling"))
install.packages(c("caret", "AppliedPredictiveModeling"))
install.packages(c("caret", "AppliedPredictiveModeling"))
install.packages(c("caret","AppliedPredictiveModeling"))
require(RCurl)
install.packages(c("caret", "AppliedPredictiveModeling"))
library(caret)
install.packages(c("caret","AppliedPredictiveModeling"))
install.packages(c("caret", "AppliedPredictiveModeling"))
library(caret)
library(AppliedPredictiveModeling)
data(ChemicalManufacturingProcess)
head(ChemicalManufacturingProcess)
dim(ChemicalManufacturingProcess)
summary(ChemicalManufacturingProcess)
set.seed(111)
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem
r2<-plsChem$results[, c("ncomp", "Rsquared","RsquaredSD")]
r2$RsquaredSE <- r2$RsquaredSD/sqrt(length(plsChem$control$index))
r2$RsquaredSE
library(ggplot2)
SE<- ggplot(r2,aes(ncomp,Rsquared,ymin=Rsquared-RsquaredSE, ymax=Rsquared))
SE + geom_linerange() + geom_pointrange() + theme_classic()
optimumR2 <-subset(r2, ncomp == which.max(R2values$Rsquared))
optimumR2 <-subset(r2, ncomp == which.max(r2$Rsquared))
optimumR2
r2$RsquaredSE
#find tolerances
tol<-(r2$Rsquared - optimumR2)/optimumR2 * 100
tol
qplot(ncomp, tol, data=r2)
#find tolerances
r2$tol<-(r2$Rsquared - optimumR2)/optimumR2 * 100
#find tolerances
r2$tol<-(r2$Rsquared - optimum$Rquared)/optimum$RSquared * 100
#find tolerances
r2$tol<-(r2$Rsquared - optimumR2$Rquared)/optimumR2$RSquared * 100
data(ChemicalManufacturingProcess)
head(ChemicalManufacturingProcess)
set.seed(111)
#had to excluse NA's
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem
best.tune(plsChem)
#4.3
install.packages("e1071")
best.tune(plsChem)
plsChem1 <- best.tune(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem1 <- tune(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
library(e1071)
plsChem1 <- best.tune(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem1 <-tune(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem1 <-tune(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="knn", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
optimumR2$lowerB <- optimumR2$RSquared - optimumR2$RsquaredSEM
optimumR2$lowerB <- optimumR2$RSquared - optimumR2$RsquaredSE
#from results take plsChem,
r2<-plsChem$results[, c("ncomp", "Rsquared","RsquaredSD")]
r2$RsquaredSE <- r2$RsquaredSD/sqrt(length(plsChem$control$index))
r2$RsquaredSE
#find best r2
optimumR2 <-subset(r2, ncomp == which.max(r2$Rsquared))
optimumR2$lowerB <- optimumR2$RSquared - optimumR2$RsquaredSE
optimumR2$lowerB <- optimumR2$RSquared - optimumR2$RsquaredSEM
optimumR2
optimumR2$lowerB <- optimumR2$RSquared - optimumR2$RsquaredSE
optimumR2$lowerB <- (optimumR2$RSquared - optimumR2$RsquaredSE)
optimumR2$lowerB <- optimumR2$RSquared - optimumR2$RsquaredSE
#find best r2
optimumR2 <-subset(r2, ncomp == which.max(r2$Rsquared))
optimumR2$lowerB <- optimumR2$RSquared - r2$RsquaredSE
optimumR2$lowerB <- optimumR2$RSquared - r2$RsquaredSE
optimumR2
optimumR2$lowerB <- optimumR2$RSquared - r2$RsquaredSE
optimumR2$lowerB <- 0.5650177 - .0.2548941
optimumR2$lowerB <- (0.5650177 - .0.2548941)
optimumR2$lowerB <- (0.5650177 - 0.2548941)
#find tolerances
r2$tol<-(r2$Rsquared - optimumR2$Rquared)/optimumR2$RSquared * 100
plot(plsChem, scales=list(x=list(log=2)))
plsChem
data(ChemicalManufacturingProcess)
head(ChemicalManufacturingProcess)
#had to excluse NA's
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem
#from results take plsChem,
r2<-plsChem$results[, c("ncomp", "Rsquared","RsquaredSD")]
r2$RsquaredSE <- r2$RsquaredSD/sqrt(length(plsChem$control$index))
#find best r2
optimumR2 <-subset(r2, ncomp == which.max(r2$Rsquared))
optimumR2
plot(plsChem, scales=list(x=list(log=3)))
plot(plsChem, scales=list(x=list(log=2)))
plsChem$control$index
plot(plsChem, scales=list(x=list(log=2)))
plot(plsChem, scales=list(x=list(log=2)))
r2
plsChem
r2
plot(plsChem, scales=list(x=list(log=2)))
set.seed(111)
set.seed(111)
data(ChemicalManufacturingProcess)
head(ChemicalManufacturingProcess)
#had to excluse NA's
plsChem <- train(Yield ~ ., data=ChemicalManufacturingProcess, na.action=na.exclude, method="pls", preProc=c("center","scale"), tuneLength=10, trControl=trainControl(method="repeatedcv", repeats=5))
plsChem
plot(plsChem, scales=list(x=list(log=2)))
r2Vals<-plsChem$results[,c("ncomp","RSquared","RSquaredSD")]
plsChem
r2Vals<-plsChem$results[,c("ncomp","RSquared","RSquaredSD")]
r2Vals<-plsChem$results[,c("ncomp","Rsquared","RsquaredSD")]
rsVals
r2Vals
#R2 Structural Equation Model
r2Vals$SEM<-r2Vals$RsquaredSD/sqrt(length(plsChem$control$index))
r2Vals
r2Opt<- subset(r2Vals,ncomp==which.max(r2Vals$Rsquared))
r2Opt
r2OptLB<-r2Opt$Rsquared - r2Opt$SEM
r2OptLB
#next best r2
r2NB<-subset(r2Vals,Rsquared >= r2OptLB & ncomp < r2Opt$ncom)
r2NB
tols<-(r2Vals$Rsquared - r2Opt$Rsquared)/r2Opt$Rsquared * 100
tols
plot(ncom, tols, data=r2Vals)
plot(ncomp, tols, data=r2Vals)
View(r2Vals)
plot(r2Vals$ncomp, tols, data=r2Vals)
#4.4
data(oil)
str(oil)
table(oilType)
str(oilType)
length(oilType)
96*.6
+1
#create Samples
for (i in 1:10){
print(freq(sample(oilType, 60)))
}
#create Samples
sample(oilType,60)
str(oilType)
length(oilType)
table(oilType)
#create Samples
head(oil)
#create Samples
head(oilType)
#create Samples
sample(oilType, 60)
frequency(oilType)
hist(sample(oilType, 60))
sample(oilType, 60)
print(sample(oilType, 60))
#create Samples
for (i in 1:5){
print(sample(oilType, 60))
}
sample[i]<-sample(oilType, 60)
sample$sample[i]<-sample(oilType, 60)
sample$i<-sample(oilType, 60)
#4.4
library(descr)
#4.4
install.packages("descr")
library(descr)
freq(sample(oilType, 60))
print(freq(sample(oilType, 60)))
freq(oilType)
print(freq(sample(oilType, 60),plot=F))
i<-freq(sample(oilType, 60),plot=F))
return x
return x[i]
sample<-freq(sample(oilType, 60),plot=F))
sample<-freq(sample(oilType, 60),plot=F)))
sample<-freq(sample(oilType, 60),plot=F))
#create Samples
Samples<-list()
Samples[[i]]<-sample(oilType, 60)
freq(Sample)
freq(Samples)
freq(Samples[1])
Samples$1
View(Samples)
View(Samples)
#create Samples
sample1<-sample(oilType, 60)
sample2<-sample(oilType, 60)
sample3<-sample(oilType, 60)
sample4<-sample(oilType, 60)
sample5<-sample(oilType, 60)
Samples<-c(sample1,sample2,sample3,sample4,sample5)
Samples
str(Samples)
freq(sample1)
freq(sample2)
freq(x)
for (x in Samples){
freq(x)
}
print(freq(x))
freq(sample1,sample2)
table(sample1)
table(sample2)
table(sample3)
table(sample4)
table(sample5)
freq(sample1,plot=F)
freq(sample2,plot=F)
freq(sample3,plot=F)
freq(sample4,plot=F)
freq(sample5,plot=F)
#createDataPartition with stratified
samp<-createDataPartition(oilTYpe,2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,2)
samp
freq(samp)
table(samp)
summary(samp)
freq(samp
)
#createDataPartition with stratified
samp<-createDataPartition(oilType,1)
freq(samp)
table(samp)
table(samp)
View(samp)
#createDataPartition with stratified
samp<-createDataPartition(oilType,,p=.6,2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.6,2)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.6,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.5,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=1,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.01,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.6,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.8,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.4,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.5,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
#createDataPartition with stratified
samp<-createDataPartition(oilType,p=.6,5)
samp<-lapply(samp, function(x,y)table(y[x]),y=oilType)
head(samp,5)
freq(samp$Resample1)
freq(samp$Resample2)
